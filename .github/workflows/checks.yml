name: checks
on: [push]

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - uses: golangci/golangci-lint-action@v2
        env:
          CGO_ENABLED: 0
        with:
          version: v1.40.0
      - uses: github/super-linter@v3
        env:
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILTER_REGEX_EXCLUDE: .*testdata/*
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_BASH: false
          VALIDATE_DOCKERFILE: false
          VALIDATE_DOCKERFILE_HADOLINT: false
          VALIDATE_GO: false # it's broken, see commit message
          VALIDATE_JSCPD: false
          VALIDATE_SHELL_SHFMT: false

  test-linux:
    name: test-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - uses: actions/cache@v2
        if: ${{ !env.ACT }}
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go test -v -cover -coverprofile=coverage.txt -covermode=atomic ./...
        env:
          CGO_ENABLED: 0

  test-macos:
    name: test-macos
    runs-on: macos-latest
    continue-on-error: true # Don't let macos test fail whole workflow
    env:
      ISO_PATH: ~/.docker/machine/cache/boot2docker.iso
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - uses: actions/cache@v2
        if: ${{ !env.ACT }}
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/cache@v2
        with:
          key: boot2docker
          path: ${{ env.ISO_PATH }}
          restore-keys: boot2docker
      - name: Install Docker on macOS
        run: |
          printf " üõ†Ô∏è Downloading boot2docker.iso üõ†Ô∏è \n\n"
          mkdir -p ~/.docker/machine/cache/
          test -f ${{ env.ISO_PATH }} && printf " üõ†Ô∏è ${{ env.ISO_PATH }} successfully restored üõ†Ô∏è \n\n" || wget "https://github.com/boot2docker/boot2docker/releases/download/v19.03.12/boot2docker.iso" -O ${{ env.ISO_PATH }}
          printf " üõ†Ô∏è Installing Docker from Homebrew üõ†Ô∏è \n\n"
          brew install docker docker-machine
          printf " üõ†Ô∏è Creating Docker VM üõ†Ô∏è \n\n"
          docker-machine create --driver virtualbox --virtualbox-boot2docker-url ${{ env.ISO_PATH }} default
          docker-machine env default
          printf " üõ†Ô∏è Adding Docker VM info to environment üõ†Ô∏è \n\n"
          eval "$(docker-machine env default)"
          echo "DOCKER_TLS_VERIFY=$DOCKER_TLS_VERIFY" | tee -a $GITHUB_ENV
          echo "DOCKER_HOST=$DOCKER_HOST" | tee -a $GITHUB_ENV
          echo "DOCKER_CERT_PATH=$DOCKER_CERT_PATH" | tee -a $GITHUB_ENV
          echo "DOCKER_MACHINE_NAME=$DOCKER_MACHINE_NAME" | tee -a $GITHUB_ENV
          printf " üõ†Ô∏è Install Qemu for running containers with different architecture üõ†Ô∏è \n\n"
          docker run --rm --privileged tonistiigi/binfmt --install all
          printf " üõ†Ô∏è Finished installing Docker üõ†Ô∏è \n\n"
      - run: go test -v -timeout 30m -cover ./...
        env:
          CGO_ENABLED: 0
