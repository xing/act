name: checks
on: [pull_request, workflow_dispatch]

env:
  ACT_OWNER: ${{ github.repository_owner }}
  ACT_REPOSITORY: ${{ github.repository }}
  CACHED_DOCKER_IMAGES: '"node:12-buster" "node:12-buster-slim" "ubuntu:18.04" "ubuntu:latest" "alpine:3.10" "tonistiigi/binfmt:latest"'
  CACHED_DOCKER_IMAGES_KEY: docker-images-0
  GO_VERSION: 1.17

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: golangci/golangci-lint-action@v2
        env:
          CGO_ENABLED: 0
        with:
          version: v1.40.0
      - uses: github/super-linter@v4.8.3
        env:
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILTER_REGEX_EXCLUDE: .*testdata/*
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_BASH: false
          VALIDATE_DOCKERFILE: false
          VALIDATE_DOCKERFILE_HADOLINT: false
          VALIDATE_GO: false # it's broken, see commit message
          VALIDATE_JSCPD: false
          VALIDATE_SHELL_SHFMT: false

  test-linux:
    name: test-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v2
        if: ${{ !env.ACT }}
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go test -v -cover -coverprofile=coverage.txt -covermode=atomic ./...
        env:
          CGO_ENABLED: 0
      - name: Upload Codecov report
        uses: codecov/codecov-action@v1.5.2
        with:
          files: coverage.txt
          fail_ci_if_error: true # optional (default = false)

  dump_images:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/cache@v2
        id: image_cache
        with:
          key: ${{ env.CACHED_DOCKER_IMAGES_KEY }}
          path: |
            registry
            docker-registry
      - name: Pull and export images
        if: steps.image_cache.outputs.cache-hit != 'true'
        run: |
          docker pull registry:2
          docker image save -o registry registry:2
          mkdir -p docker-registry
          docker run -d -p 5000:5000 --name registry -v $PWD/docker-registry:/var/lib/registry registry:2
          npx wait-on tcp:5000
          for image in ${{ env.CACHED_DOCKER_IMAGES }}
          do
            bash -c 'docker pull "'"$image"'" && docker tag "'"$image"'" "localhost:5000/'"$image"'" && docker push "localhost:5000/'"$image"'"'&
          done
          wait

  test-macos:
    needs: dump_images
    name: test-macos
    runs-on: macos-latest
    continue-on-error: true # Don't let macos test fail whole workflow
    env:
      ISO_PATH: ~/.docker/machine/cache/boot2docker.iso
    steps:
      - uses: actions/checkout@v2
      - name: Restore Docker Image Cache
        uses: actions/cache@v2
        id: image_cache
        continue-on-error: true
        with:
          key: ${{ env.CACHED_DOCKER_IMAGES_KEY }}
          path: |
            registry
            docker-registry
      - uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v2
        if: ${{ !env.ACT }}
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/cache@v2
        with:
          key: boot2docker
          path: ${{ env.ISO_PATH }}
          restore-keys: boot2docker
      - name: Install Docker on macOS
        run: |
          printf " üõ†Ô∏è Downloading boot2docker.iso üõ†Ô∏è \n\n"
          mkdir -p ~/.docker/machine/cache/
          test -f ${{ env.ISO_PATH }} && printf " üõ†Ô∏è ${{ env.ISO_PATH }} successfully restored üõ†Ô∏è \n\n" || wget "https://github.com/boot2docker/boot2docker/releases/download/v19.03.12/boot2docker.iso" -O ${{ env.ISO_PATH }}
          printf " üõ†Ô∏è Installing Docker from Homebrew üõ†Ô∏è \n\n"
          brew install docker docker-machine
          printf " üõ†Ô∏è Creating Docker VM üõ†Ô∏è \n\n"
          docker-machine create --driver virtualbox --virtualbox-boot2docker-url ${{ env.ISO_PATH }} default
          docker-machine env default
          printf " üõ†Ô∏è Adding Docker VM info to environment üõ†Ô∏è \n\n"
          eval "$(docker-machine env default)"
          echo "DOCKER_TLS_VERIFY=$DOCKER_TLS_VERIFY" | tee -a $GITHUB_ENV
          echo "DOCKER_HOST=$DOCKER_HOST" | tee -a $GITHUB_ENV
          echo "DOCKER_CERT_PATH=$DOCKER_CERT_PATH" | tee -a $GITHUB_ENV
          echo "DOCKER_MACHINE_NAME=$DOCKER_MACHINE_NAME" | tee -a $GITHUB_ENV
          printf " üõ†Ô∏è Finished installing Docker üõ†Ô∏è \n\n"
      - name: Import images
        if: steps.image_cache.outputs.cache-hit == 'true'
        continue-on-error: true
        run: |
          echo load registry
          docker image load -i registry
          echo Setup local registry
          docker run -d -p 5000:5000 --name registry -v $PWD/docker-registry:/var/lib/registry registry:2
          echo pulling images from cache
          for image in ${{ env.CACHED_DOCKER_IMAGES }}
          do
            bash -c '(sleep 1 && docker pull "localhost:5000/'"$image"'" || sleep 2 && docker pull "localhost:5000/'"$image"'" || sleep 10 && docker pull "localhost:5000/'"$image"'") && docker tag "localhost:5000/'"$image"'" "'"$image"'"'&
          done
          wait
      - name: üõ†Ô∏è Install Qemu for running containers with different architecture üõ†Ô∏è
        run: docker run --rm --privileged tonistiigi/binfmt:latest --install all
      - run: go test -v -timeout 30m -cover ./...
        env:
          CGO_ENABLED: 0

  snapshot:
    name: snapshot
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v2
        if: ${{ !env.ACT }}
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --snapshot --rm-dist
      - name: Capture x86_64 (64-bit) Linux binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-linux-amd64
          path: dist/act_linux_amd64/act
      - name: Capture i386 (32-bit) Linux binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-linux-i386
          path: dist/act_linux_386/act
      - name: Capture arm64 (64-bit) Linux binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-linux-arm64
          path: dist/act_linux_arm64/act
      - name: Capture armv6 (32-bit) Linux binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-linux-armv6
          path: dist/act_linux_arm_6/act
      - name: Capture armv7 (32-bit) Linux binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-linux-armv7
          path: dist/act_linux_arm_7/act
      - name: Capture x86_64 (64-bit) Windows binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-windows-amd64
          path: dist/act_windows_amd64/act.exe
      - name: Capture i386 (32-bit) Windows binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-windows-i386
          path: dist/act_windows_386/act.exe
      - name: Capture arm64 (64-bit) Windows binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-windows-arm64
          path: dist/act_windows_arm64/act.exe
      - name: Capture armv7 (32-bit) Windows binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-windows-armv7
          path: dist/act_windows_arm_7/act.exe
      - name: Capture x86_64 (64-bit) MacOS binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-macos-amd64
          path: dist/act_darwin_amd64/act
      - name: Capture arm64 (64-bit) MacOS binary
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v2
        with:
          name: act-macos-arm64
          path: dist/act_darwin_arm64/act
